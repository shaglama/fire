#!/bin/bash
#v0.0.3.45
SCRIPT=`readlink -f $0`
SCRIPT_DIR=`dirname $(readlink -f $0)`
FIRE_HOME=$(readlink -f "$SCRIPT_DIR")
SHARED="$FIRE_HOME/shared"
UTILS="$FIRE_HOME/utils"
MODE="not_set"

##### FUNCTIONS ########################################################################
#split stringToSplit delimiter nameOfArray 
function split() {
 
        IFS="$2" read -r -a "$3" -d '' < <(printf %s "$1");
}
urldecode() {
    # urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}


function reinstall(){
	#should save a copy of original installer ( or possibly the zip file and then ) to shared folder
	#save options from last install to memory
	#run uninstall
	#run original installer with options from previous install or extract zip and run fire_builder with options
        local options="$1"
	local o_array
        if [[ "$options" == *[!\ ]* ]]; then
               split $options ";" o_array
		echo "${o_array[*]}"
	 echo "not implemented yet. Coming soon."
        else 
                echo "cannot reinstall fire. no options set for reinstall"
                exit 1
        fi
}
function upgrade(){
	/bin/bash "$FIRE_HOME/fire_builder/fire_builder" --mode=upgrade
}
function uninstall(){
        /bin/bash "$FIRE_HOME/fire_extenguisher/fire_extenguisher" --uninstall
}
function start(){
        sudo systemctl start fire_watch.service
}
function stop(){
			/bin/bash "$FIRE_HOME/fire_extenguisher/fire_extenguisher"
        sudo systemctl stop fire_watch.service
}
function restart(){
        stop
        start
}
function refreshBlockchain(){
	/bin/bash "$FIRE_HOME/fire_builder/fire_builder" --mode=refresh
}
function viewFireStatus(){
	echo `tail -n 1 "$FIRE_HOME/fire_wood/shared/logs/fire_watch.log"`
}
function info(){
		  local fireVersion=`cat $FIRE_HOME/fire_wood/shared/dat/fire_version`
		  local heatVersion=`cat $FIRE_HOME/fire_wood/shared/dat/heat_version`
        local isForging=`/bin/bash $FIRE_HOME/fire_forge/fire_forge --isForging`
        local forgingStatus=`/bin/bash $FIRE_HOME/fire_forge/fire_forge --status`
        local nodeStatus=`/bin/bash $FIRE_HOME/fire_report/fire_report --status`
        local forgingMsg="Node is not forging"
        if [[ $isForging == "true" ]]; then
        		forgingMsg="Node is forging"
        fi
        
echo "-----------------------     Fire Information     ------------------------------ 
Fire Version: $fireVersion
        
##### Node Status #############################################################
        
$nodeStatus
        
        
##### Forging Status ##########################################################        
        
$forgingStatus
$forgingMsg
"
}
function viewFireLogs(){
	echo `systemctl status fire_builder.service`
	echo " "
	echo `systemctl status fire_watch.service`
}
function viewNodeLogs(){
	 local heatDir="$FIRE_HOME/fire_wood/heat"
    local rel="$(ls $heatDir | grep heatledger-*)"
    local relDir="$heatDir/$rel"
    local binDir="$relDir/bin"
    local nodeLog="$binDir/heatledger.log"  
    tail -f $nodeLog

}
function attachToNode(){
	screen -x heatLedger
}
##### PROGRAM #########################################################################
#get arguments
# As long as there is at least one more argument, keep looping
while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
	-U|--uninstall)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="uninstall"
		else
			echo "cannot set mode to uninstall. mode is already set"
		fi
		;;
	-R|--reinstall)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="reinstall"
		else
			echo "cannot set mode to reinstall. mode is already set"
		fi
		;;
		
	-U|--upgrade)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="upgrade"
		else
			echo "cannot set mode to upgrade. mode is already set"
		fi
		;;
	-r|--restart)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="restart"
		else
			echo "cannot set mode to restart. mode is already set"
		fi
		;;
	-st|--start)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="start"
		else
			echo "cannot set mode to start. mode is already set"
		fi
		;;
	-sp|--stop)
		if [[ "$MODE" == "not_set" ]]; then
			MODE="stop"
		else
			echo "cannot set mode to stop. mode is already set"
		fi
		;;
	-rb|--refreshBlockchain)
		if [[ "$MODE" == "not_set"  ]]; then
                	MODE="refreshBlockchain"
		else
			echo "cannot set mode to refreshBlockchain. mode is already set"
		fi
	
		;;
   -i|--info)
		if [[ "$MODE" == "not_set"  ]]; then
                	MODE="info"
		else
			echo "cannot set mode to info. mode is already set"
		fi
      ;;
	-vfs|--viewFireStatus)
		if [[ "$MODE" == "not_set"  ]]; then
			MODE="viewFireStatus"
		else
			echo "cannot set mode to view fire status. mode is already set"
		fi
		;;
	-vfl|--viewFireLogs)
		if [[ "$MODE" == "not_set"  ]]; then
			MODE="viewFireLogs"
		else
			echo "cannot set mode to view fire logs. mode is already set"
		fi
		;;
	-vnl|--viewNodeLogs)
		if [[ "$MODE" == "not_set"  ]]; then
			MODE="viewNodeLogs"
		else
			echo "cannot set mode to view node logs. mode is already set"
		fi
		;;
	-an|--attachToNode)
		if [[ "$MODE" == "not_set"  ]]; then
			MODE="attachToNode"
		else
			echo "cannot set mode to attach to node. mode is already set"
		fi
		;;
		
	-RO|--reinstallOptions)
		shift
		REINSTALL_OPTIONS="$1"
		;;
	-RO=*|--reinstallOptions=*)
		REINSTALL_OPTIONS="${key#*=}"
		;;
	--ro=*|--restartOptions=*)
		RESTART_OPTIONS="${key#*=}"
		;;	
        *)
        	# Do whatever you want with extra options
        	echo "Unknown option '$key'"
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done

case $MODE in
	"reinstall")
		reinstall $REINSTALL_OPTIONS
		;;
	"uninstall")
		uninstall
		;;
	"upgrade")
		upgrade
		;;
	"start")
		start
		;;
	"stop")
		stop
		;;
	"restart")
		restart
		;;
	"refreshBlockchain")
		refreshBlockchain
		;;
	"info")
		info
		;;	
	"viewNodeLogs")
		viewNodeLogs
		;;
	"viewFireLogs")
		viewFireLogs
		;;
	"viewFireStatus")
		viewFireStatus
		;;
	"attachToNode")
		attachToNode
		;;
	*)
		echo "invalid mode!!!!!!"
		;;
esac
