#!/bin/bash
SCRIPT=`readlink -f $0`
SCRIPT_DIR=`dirname $(readlink -f $0)`
FIRE_HOME=$(readlink -f "$(dirname $SCRIPT_DIR)")
FIRE_WOOD="$FIRE_HOME/fire_wood"
UTILS="$FIRE_WOOD/utils"
SHARED="$FIRE_WOOD/shared"
FS="$FIRE_WOOD/fire_fs"


MODE="init"
RELEASE_JSON=""= #json returned from polling github for newest release, set automatically
RELEASE_NUM="" #heatledger version number, set automatically
RELEASE="" #heatledger release name, set automatically
RELEASE_FILE="" #the heatledger file, set automatically
RELEASE_URL="" #the url to download heatledger from, set automatically
SNAPSHOT_URL="https://heatbrowser.com/blockchain.tgz" #the url where heatledger blockchain snapshots are hosted
HEAT_USER=$USER #user to run the node with, defaults to user that runs the script. to set a different user change here or pass in as argument, if user does not exist it will be created
PASSWORD= #password for creating a new user, if new user is created without changing the password here or passing in as argument you will need to set the password yourself after running this script
API_KEY="changeMePlease" #Default api key, please change or pass in as argument
IP_ADDRESS="" #public ip address or host, set here or pass as argument. if no value is set, the script will attempt to obtain it from a public provider (dynDNS)
WALLET_SECRET="" #the secret passphrase for the wallet running the node, set here or pass as argument
HEAT_ID="" #the account id of the wallet running the node, set here or pass in as argument
MAX_PEERS=500 #number of peers node should connect to,set here or pass as argument, defaults to 500
HALLMARK="" #the node hallmark, increases forging profits, set here or pass in as argument, if not set script will attempt to create a new hallmark for the node
FORCE_SCAN="false" #if set to true node will be configured to rescan blockchain
FORCE_VALIDATE="false" #if set to true node will be configured to revalidate transactions on the blockchain
USE_SNAPSHOT="false" #if set to true, a snapshot of the blockchain will be downloaded from heatbrowser.com
AUTO_UPGRADE="true" #if set to true, the script will check hourly to see if there are any updates for Heat Ledger and install them
CURRENT_DATE="" #No need to set this, its automatically obtained

#functions#####################################################################
urlencode() {
	# urlencode <string>
	old_lc_collate=$LC_COLLATE
	LC_COLLATE=C

	local length="${#1}"
	for (( i = 0; i < length; i++ )); do
		local c="${1:i:1}"
		case $c in
				[a-zA-Z0-9.~_-]) printf "$c" ;;
				*) printf '%%%02X' "'$c" ;;
		esac
	done

	LC_COLLATE=$old_lc_collate
}
function getLatestReleaseInfo(){
	RELEASE_JSON=`curl -s https://api.github.com/repos/Heat-Ledger-Ltd/heatledger/releases/latest`
	RELEASE_NUM=`echo "$RELEASE_JSON" | jq -r ".tag_name" | cut -c 2-`
	RELEASE_FILE=`echo "$RELEASE_JSON" | jq -r ".assets[0] | .name"`
	RELEASE_URL=`echo "$RELEASE_JSON" | jq -r ".assets[0] | .browser_download_url"`
	RELEASE=`echo "$RELEASE_FILE" | rev | cut -c 5- | rev`
}
function getHallmark(){
CURRENT_DATE=$(date +'%Y-%m-%d') &&
HALLMARK_URL="http://localhost:7733/api/v1/tools/hallmark/encode/$IP_ADDRESS/200/$CURRENT_DATE/$ENCODED"
HALLMARK_RESPONSE=`curl --max-time 30 -X GET --header 'Accept: application/json' $HALLMARK_URL` &&
GOT_HALLMARK=$?
if [[ ! $GOT_HALLMARK ]]; then
	return 1
fi
HALLMARK=`echo "$HALLMARK_RESPONSE" | cut -c14- | rev | cut -c3- | rev` &&
echo "$HALLMARK"
return 0
}
function ensureScreensAreDead(){
	if [[ `screen -ls | grep heatLedger` ]]; then
		#screen wasn't killed
		screen -ls | while read -r name stuff; do
			screen -S "$name" -X quit
 		done
 		screen -wipe
	fi
}
#program######################################################################
#get arguments
# As long as there is at least one more argument, keep looping
while [[ $# -gt 0 ]]; do
	key="$1"
	case "$key" in
		-u|--user)
			shift # past the key and to the value
			HEAT_USER="$1"
			;;

		-p|--password)
			shift # past the key and to the value
			PASSWORD="$1"
				;;

		-k|--key)
			shift #past the key and to the value
			API_KEY="$1"
				;;
	
		-i|--ipAddress)
			shift
			IP_ADDRESS="$1"
			;;
	
		-a|--accountNumber)
			shift
			HEAT_ID="$1"
			;;
	
		-s|--walletSecret)#need to encode later, don't forget
			shift
			WALLET_SECRET="$1"
			;;
	
		-m|--maxPeers)
			shift
			MAX_PEERS="$1"
			;;
	
		-h|--hallmark)
			shift
			HALLMARK="$1"
			;;
	
		-fr|--forceScan)
			shift
			FORCE_SCAN="$1"
			;;
	
		-fv|--forceValidate)
			shift
			FORCE_VALIDATE="$1"
			;;
	
		-d|--downloadSnapshot)
			shift
			USE_SNAPSHOT="$1"
			;;
		-su|--snapshotUrl)
			shift
			SNAPSHOT_URL="$1"
			;;
		-au|--autoUpgrade)
			shift
			AUTO_UPGRADE="$1"
			;;
		-M|--mode)
			shift
			MODE="$1"
			;;
		-u=*|--user=*)
			# No need to shift here since the value is part of the same string
			HEAT_USER="${key#*=}"
			;;
	
		-p=*|--password=*)
			# No need to shift here since the value is part of the same string
			PASSWORD="${key#*=}"
			;;
	
		-k=*|--key=*)
			#No need to shift here since the value is part of the same string
			API_KEY="${key#*=}"
			;;
	
		-i=*|--ipAddress=*)
			IP_ADDRESS="${key#*=}"
			;;
	
		-a=*|--accountNumber=*)
			HEAT_ID="${key#*=}"
			;;
	
		-s=*|--walletSecret=*)
			WALLET_SECRET="${key#*=}"
			;;
	
		-m=*|--maxPeers=*)
			MAX_PEERS="${key#*=}"
			;;
	
		-h=*|--hallmark=*)
			HALLMARK="${key#*=}"
			;;
	
		-fs=*|--forceScan=*)
			FORCE_SCAN="${key#*=}"
			;;
	
		-fv=*|--forceValidate=*)
			FORCE_VALIDATE="${key#*=}"
			;;
	
		-d=*|--downloadSnapshot=*)
			USE_SNAPSHOT="${key#*=}"
			;;
	
		-su=*|--snapshotUrl=*)
			SNAPSHOT_URL="${key#*=}"
			;;
		-au=*|--autoUpgrade=*)
			AUTO_UPGRADE="${key#*=}"
			;;
			-M=*|--mode=*)
			MODE="${key#*=}"
			;;
	
		*)
			# Do whatever you want with extra options
			echo "Unknown option '$key'"
			;;
	esac
	# Shift after checking all the cases to get the next option
	shift
done

case "$MODE" in
	init)
##### init mode ###############################################################
		echo  "inititializing...."
		F_USER=$(cat "$FIRE_WOOD/shared/dat/user/heat.user")
		if [[ "$F_USER" = *[!\ ]* ]]; then
	
			cd $UTILS
			./mountFireFS
	
			mkdir "$FS/pid"
			mkdir "$FS/user"
	
			echo "made dirs"
			touch "$FS/pid/fire.pid"
			echo "$F_USER" > "$FS/user/fire.user"
			chown -R "$F_USER" "$FS"
			exit 0
		else
			echo "fire_builder error: no user listed in  fire_fs/user/fire.user"
			echo "fire_builder error: could not create file system"
			exit 1
		fi
		;;
	stop)
##### stop mode ###############################################################
		sudo umount fire_fs
		;;
	install)
##### install mode ############################################################
		echo "installing...."

			#verify user
			if id "$HEAT_USER" >/dev/null 2>&1; then
				#user exists
				#proceed
				echo "verified user"
			else
				#user does not exist
				# quietly add a user without password
				echo "adding user: $HEAT_USER"
				sudo adduser --quiet --disabled-password --shell /bin/bash --home /home/$HEAT_USER --gecos "User" $HEAT_USER				
				#if password was supplied, set user password
				if [[ $PASSWORD = *[!\ ]* ]]; then
					# set password
					sudo echo "$HEAT_USER:$PASSWORD" | chpasswd
					echo "password was not set, it will need to be set manually"
				fi
	
			fi
	
			#make sure node ip is set, if not try to determine what it is
			if [[ $IP_ADDRESS = *[!\ ]* ]]; then
				#already set
				echo "IP Address is set. Using $IP_ADDRESS"
			else
				echo "IP Address was not set. Attempting to obtain public ip from myip.opendns.com"
				IP_ADDRESS=`dig +short myip.opendns.com @resolver1.opendns.com`
				gotIp=$?
				if [[ $gotIp ]]; then				
					echo "Got public IP Address. Using $IP_ADDRESS"
				else
					echo "Error: Unable to get public IP Address!!! Exiting"
					exit 1
				fi
			fi
	
			#Verify HEAT_ID (accountNumber in arguments)
			if [[ $HEAT_ID = *[!\ ]* ]]; then
				#already set
				echo "Heat Id was set. Using: $HEAT_ID"
			else
				echo "HEAT_ID was not set in this script or passed in as an argument (accountNumber). HEAT_ID is required. Exiting script."
				exit 1
			fi

			##Verify and encode WALLET_SECRET
			if [[ $WALLET_SECRET = *[!\ ]* ]]; then
				#already set
				#URI encode it
				if [[ `echo $WALLET_SECRET | grep "%20"` ]]; then
					echo "Verified wallet secret"
				else
					echo "Encoding wallet secret"
					ENCODED=$(urlencode "$WALLET_SECRET")
					echo "Verified wallet secret"					
				fi
			else
				echo "WALLET_SECRET was not set in this script or passed in as an argument. WALLET_SECRET IS REQUIRED. Exiting script."
				exit 1
			fi
	
			##Verify FORCE_SCAN
			#Convert to lower case
			FS_LC=`echo "$FORCE_SCAN" | sed 's/.*/\L&/'`
			if [[ "$FS_LC" == "true" || "$FS_LC" == "false" ]]; then
				FORCE_SCAN="$FS_LC"
				echo "Force scan was set to $FORCE_SCAN"
			else
				echo "$FORCE_SCAN is invalid value for force scan. Valid values are true and false"
				exit 1
			fi
	
			##Verify FORCE_VALIDATE
			#Convert to lower case
			FV_LC=`echo $FORCE_VALIDATE | sed 's/.*/\L&/'`
			if [[ "$FV_LC" == "true" || "$FV_LC" == "false" ]]; then
				FORCE_VALIDATE="$FV_LC"
				echo "Force validate was set to $FORCE_VALIDATE"
			else
				echo "$FORCE_VALIDATE is invalid value for force validate. Valid values are true and false"
				exit 1
			fi
	
			##Verify USE_SNAPSHOT
			#Convert to lower case
			US_LC=`echo $USE_SNAPSHOT | sed 's/.*/\L&/'`
			if [[ "$US_LC" == "true" || "$US_LC" == "false" ]]; then
				USE_SNAPSHOT="$US_LC"
				echo "Use snapshot was set to $USE_SNAPSHOT"
			else
				echo "$USE_SNAPSHOT is invalid value for Download Snapshot (USE_SNAPSHOT). Valid values are true and false"
				exit 1
			fi
			##Verify AUTO_UPGRADE
			#Convert to lower case
			AU_LC=`echo $AUTO_UPGRADE | sed 's/.*/\L&/'`
			if [[ "$AU_LC" == "true" || "$AU_LC" == "false" ]]; then
				AUTO_UPGRADE=$AU_LC				
				echo "Auto Upgrade was set to $AUTO_UPGRADE"
			else
				echo "$AUTO_UPGRADE is invalid value for autoUpgrade. Valid values are true and false"
				exit 1
			fi
			#GET HALLMARK HERE
			if [[ $HALLMARK == *[!\ ]* ]]; then
				#already set
				hallmarkSet="true"
				echo "hallmark was set"
			else
				echo "hallmark was not set, it will be obtained automatically later."
				hallmarkSet="false"
			fi
	
			#update repos and packages and install dependencies
			sudo apt-get update &&			
			if [[ ! `/usr/bin/which java` ]]; then
				sudo apt-get install -y default-jdk
			else
				echo "java is already installed"	 
			fi
			
			sudo apt-get install -y p7zip-full &&
			#sudo apt-get install -y unzip && no longer needed
			sudo apt-get install -y screen &&
			sudo apt-get install -y curl &&
			sudo apt-get install -y jq && #to parse JSON
			sudo apt-get install -y bc && #for math
			sudo apt-get install -y dbus #needed for some installs, not sure why its missing in those variations, need to investigate further, I believe the script may be starting before dbus was all the way up			
			#sudo apt-get install -y dialog #for UI, may move this
			#sudo apt-get install -y #some version of curses maybe for UI?
			
			#get latest release info
			getLatestReleaseInfo
	
			echo "RELEASE: $RELEASE"
			echo "VERSION: $RELEASE_NUM"
			echo "FILE: $RELEASE_FILE"
			echo "URL: $RELEASE_URL"
	
			BASE_DIR="$FIRE_WOOD/heat"
			VER_DIR="$BASE_DIR/$RELEASE"
			CONF_DIR="$VER_DIR/conf"
			BIN_DIR="$VER_DIR/bin"
	
			CONF="$CONF_DIR/heat.properties"
			BIN="$BIN_DIR/heatledger"

			#download and extract heatLedger
	
			#mkdir $BASE_DIR
			cd $BASE_DIR
			wget $RELEASE_URL &&
			7z x $RELEASE_FILE &&
			rm $RELEASE_FILE &&
			cd "$VER_DIR"
			
			#create config file
			echo "\
				heat.apiKey=$API_KEY
				heat.myAddress=$IP_ADDRESS
				heat.myPlatform=$HEAT_ID
				heat.maxNumberOfConnectedPublicPeers=$MAX_PEERS
				heat.forceScan=$FORCE_SCAN
				heat.forceValidate=$FORCE_VALIDATE
			" > $CONF
	
			#save install vars
			echo "$AUTO_UPGRADE" > "$SHARED/dat/autoUpgrade"
			echo "$HEAT_USER" > "$SHARED/dat/user/heat.user"
			echo "$RELEASE_NUM" > "$SHARED/dat/heat_version"
			echo "$(date)" > "$SHARED/dat/install_time"
			echo "$IP_ADDRESS" > "$SHARED/dat/ipAddress"
			echo "$MAX_PEERS" > "$SHARED/dat/maxPeers"
			echo "$FORCE_SCAN" > "$SHARED/dat/forceScan"
			echo "$FORCE_VALIDATE" > "$SHARED/dat/forceValidate"
			echo "$USE_SNAPSHOT" > "$SHARED/dat/useSnapshot"
			echo "$SNAPSHOT_URL" > "$SHARED/dat/snapshotUrl"
			echo "$PASSWORD" > "$SHARED/dat/private/userPassword.txt"
			echo "$ENCODED" > "$SHARED/dat/private/urlCompliant.txt"
			echo "$API_KEY" > "$SHARED/dat/private/key.txt"
			echo "$HEAT_ID" > "$SHARED/dat/private/id.txt"
			
			fw_wd="WorkingDirectory=$FIRE_HOME/fire_watch"
			fw_st="ExecStart=$FIRE_HOME/fire_watch/fire_watch start"
			fw_sp="ExecStop=$FIRE_HOME/fire_watch/fire_watch stop"
			fw_rs="ExecRestart=$FIRE_HOME/fire_watch/fire_watch restart"
			fb_wd="WorkingDirectory=$FIRE_HOME/fire_builder"
			fb_st="ExecStart=$FIRE_HOME/fire_builder/fire_builder"
			svc_user="User=$HEAT_USER"
			#fb_sp= #included for future use
			#fb_rs= #included for future use
			sed -i "/WorkingDirectory/c $fw_wd" "$FIRE_HOME/fire_watch/fire_watch.service"
			sed -i "/ExecStart/c $fw_st" "$FIRE_HOME/fire_watch/fire_watch.service"
			sed -i "/ExecStop/c $fw_sp" "$FIRE_HOME/fire_watch/fire_watch.service"
			sed -i "/ExecRestart/c $fw_rs" "$FIRE_HOME/fire_watch/fire_watch.service"
			sed -i "/User=changeMe/c $svc_user" "$FIRE_HOME/fire_watch/fire_watch.service"
	
			sed -i "/WorkingDirectory/c $fb_wd" "$FIRE_HOME/fire_builder/fire_builder.service"
			sed -i "/ExecStart/c $fb_st" "$FIRE_HOME/fire_builder/fire_builder.service"
			#sed -i "/WorkingDirectory/c $fb_sp" "$FIRE_HOME/fire_builder/fire_builder.service" #included for future use
			#sed -i "/WorkingDirectory/c $fb_rs" "$FIRE_HOME/fire_builder/fire_builder.service" #included for future use
			sed -i "/User=changeMe/c $svc_user" "$FIRE_HOME/fire_builder/fire_builder.service"
	
			sudo cp "$FIRE_HOME/fire_builder/fire_builder.service" "/etc/systemd/system/fire_builder.service"
			sudo cp "$FIRE_HOME/fire_watch/fire_watch.service" "/etc/systemd/system/fire_watch.service"
			sudo /bin/bash "$UTILS/replaceText" "CHANGE_ME" "$FIRE_HOME/fire_builder" "$FIRE_HOME/fire_builder/fire_builder.service"
			sudo /bin/bash "$UTILS/replaceText" "CHANGE_ME" "$FIRE_HOME/fire_watch" "$FIRE_HOME/fire_watch/fire_watch.service"
			sudo chmod -R 700 $FIRE_HOME		
			sudo systemctl enable fire_builder
			sudo systemctl enable fire_watch
			sudo systemctl daemon-reload
			
			if [[ $hallmarkSet == "true" ]]; then
				echo "heat.myHallmark=$HALLMARK" >> $CONF # be sure to append here and not overwrite
				echo "$HALLMARK" > "$SHARED/dat/hallmark"			
			fi	
						
			#echo "starting fire_builder"
			#sudo systemctl start fire_builder &&
			#echo "starting fire_watch"
			#sudo systemctl start fire_watch
			
			if [[ $hallmarkSet == "false" ]]; then			
				
				echo "starting fire_builder"
				sudo systemctl start fire_builder &&
				echo "starting fire_watch"
				sudo systemctl start fire_watch		
			
				done="false"
				tries=0;
				maxTries=10;
				echo "Hallmark has not been set. Will attempt to obtain hallmark from local node. This may take some time as the node must be started and reach a state where it is able to fill requests before this command can complete."
				while [[  "$done" == "false"  ]]; do
					tries=$(( $tries + 1 ))
					if [[ $tries -gt $maxTries ]]; then
						echo "Error: Failed to obtain hallmark!!! Exiting"
						/bin/bash "$FIRE_HOME/fire" "--uninstall"
						exit 1
					fi					
					echo "attempting to obtain hallmark from local node...."
					sleep 30s
					HALLMARK=`getHallmark`
					succeeded=$?
					if [[ $succeeded ]]; then
						if [[ "$HALLMARK" == *[!\ ]* ]]; then
						 	done="true"
						 	echo "Hallmark was set"
						else
							echo "unable to obtain hallmark"
						fi
					else
						echo "unable to obtain hallmark"
					fi
				done
				echo "heat.myHallmark=$HALLMARK" >> $CONF
				echo "$HALLMARK" > "$SHARED/dat/hallmark"
				sudo /bin/bash $FIRE_HOME/fire_extenguisher/fire_extenguisher
				sudo systemctl stop fire_watch.service
				ensureScreensAreDead
				#sudo systemctl start fire_watch.service 
			fi
			
			
			
			
			#download snapshot if neccessary
			if [[ "$USE_SNAPSHOT" == "true" ]]; then
				EXISTS=`/bin/bash "$FIRE_WOOD/utils/urlExists" "$SNAPSHOT_URL"`
				if [[ "$EXISTS" == "true"  ]]; then
					cd $BIN_DIR
					FILE=${SNAPSHOT_URL##*/}
					DEST="blockchain"
					rm -r "blockchain"
					case "$FILE" in
	
						*.tar.bz2)  ;& #fallthrough
						*.bz2)
							wget $SNAPSHOT_URL
							BC_FOLDER=`tar -tjvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]];then #archive contains blockchain folder
									rm $DEST
									tar -xjvf $FILE
							else
									rm $DEST
									mkdir $DEST
									tar -xjvf $FILE -C $DEST
							fi
							rm $FILE
							;;
	
						*.tar.gz)   ;& #fallthrough
						*.tgz)      ;& #fallthrough
						*.gz)
							wget $SNAPSHOT_URL
							BC_FOLDER=`tar -tzvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]];then #archive contains blockchain folder
									rm $DEST
									tar -xzvf $FILE
							else
									rm $DEST
									mkdir $DEST
									tar -xzvf $FILE -C $DEST
							fi
							rm $FILE
							;;

						*.tar)
							wget $SNAPSHOT_URL
							BC_FOLDER=`tar -tvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]]; then #archive contains blockchain folder
								rm $DEST
								tar -xvf $FILE
							else
								rm $DEST
								mkdir $DEST
								tar -xvf $FILE -C $DEST
							fi
							rm $FILE
							;;
						*.zip)      ;& #fallthrough
						*.7z)       ;& #fallthrough
						*.rar)
							wget $SNAPSHOT_URL
							BC_FOLDER="blockchain"
							FOLDER_EXIST=`7z l $FILE | grep $BC_FOLDER`
							echo  "folderexist: $FOLDER_EXIST"
							if [[ $FOLDER_EXIST == *[!\ ]* ]]; then
																echo "exists"
								7z x $FILE
							else
								echo "doesn't exist"
								7z x $FILE -o$DEST
							fi
							rm $FILE
							;;
						*)
							echo "unsupported archive type"
							exit 1
							;;
					esac
	
				else
					echo "Error: Snapshot url: $SNAPSHOT_URL does not exist or could not be reached!!!"
					exit 1
				fi
	
			fi
			
			#start fire
			sudo systemctl start fire_watch.service 
			echo "Fire installed!!!"
			echo "Heat node should start automatically in 1 minute"
			echo "After the node has had time to start, move to the fire folder:
			example:
			cd fire
			then run the command:
			./fire --info to view its status"
			
			;;
			
		upgrade)
##### upgrade mode ############################################################
			BASE_DIR="$FIRE_WOOD/heat"			
			
			#get current version
			currentRelease=`ls $BASE_DIR | grep "heatledger"`
			currentVersion=`echo $currentRelease | tr -d "heatledger-"`			
			#set file structure
			VER_DIR="$BASE_DIR/$currentRelease"
			CONF_DIR="$VER_DIR/conf"
			BIN_DIR="$VER_DIR/bin"	
			CONF="$CONF_DIR/heat.properties"
			
			#check if new version exists
			#get latest release info
			getLatestReleaseInfo
			newestVersion=$RELEASE_NUM
			
			#compare to current version, upgrade if newer
			if [[ ! $currentVersion == $newestVersion ]]; then
				echo "Upgrading from $currentVersion to $newestVersion"
				#stop node
				/bin/bash "FIRE_HOME/fire_extenguisher/fire_extenguisher"
				sudo systemctl stop fire_watch.service
				ensureScreensAreDead				
				#save blockchain folder 
				mv "$BIN_DIR/blockchain" "/tmp/fire_blockchain"
				#save conf
				mv "$CONF" "/tmp/fire_conf"
				#remove old version
				rm -r "$VER_DIR"
				#download and extract new version
				cd $BASE_DIR
				wget $RELEASE_URL &&
				7z x $RELEASE_FILE &&
				rm $RELEASE_FILE &&
				#save version number to settings file
				echo "$RELEASE_NUM" > "$SHARED/dat/heat_version"
				#set file structure
				VER_DIR="$BASE_DIR/$RELEASE"
				CONF_DIR="$VER_DIR/conf"
				BIN_DIR="$VER_DIR/bin"	
				CONF="$CONF_DIR/heat.properties"
				#restore blockchain folder
				mv "/tmp/fire_blockchain" "$BIN_DIR/blockchain"
				#restore conf
				mv "/tmp/fire_conf" $CONF
				#set permissions
				chmod -R 700 "$BASE_DIR"
				#start node
				/bin/bash "$FIRE_HOME/fire_starter/fire_starter"
				echo "Upgrade Complete"
			else
				echo "Not upgrading: Latest version of Heat Ledger is already installed." 
			fi
			;;
		refresh)
##### refresh blockchain mode #################################################
			useSnap=`cat "$SHARED/dat/useSnapshot"`
			snapUrl=
			BASE_DIR="$FIRE_WOOD/heat"			
			currentRelease=`ls $BASE_DIR | grep "heatledger"`
			VER_DIR="$BASE_DIR/$currentRelease"
			BIN_DIR="$VER_DIR/bin"
			/bin/bash "$FIRE_HOME/fire_extenguisher/fire_extenguisher"
			sudo systemctl stop fire_watch.service
			ensureScreensAreDead			
			cd $BIN_DIR
			echo $BIN_DIR
			rm -r blockchain
			if [[ $useSnap == "true" ]]; then
				snapUrl=`cat "$SHARED/dat/snapshotUrl"`
				echo $snapUrl
				FILE=${snapUrl##*/}
				echo "file: $FILE"
				DEST="blockchain"
				case "$FILE" in
						*.tar.bz2)  ;& #fallthrough
						*.bz2)
							wget $snapUrl
							BC_FOLDER=`tar -tjvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]];then #archive contains blockchain folder
									rm $DEST
									tar -xjvf $FILE
							else
									rm $DEST
									mkdir $DEST
									tar -xjvf $FILE -C $DEST
							fi
							rm $FILE
							;;
	
						*.tar.gz)   ;& #fallthrough
						*.tgz)      ;& #fallthrough
						*.gz)
							wget $snapUrl
							BC_FOLDER=`tar -tzvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]];then #archive contains blockchain folder
									rm $DEST
									tar -xzvf $FILE
							else
									rm $DEST
									mkdir $DEST
									tar -xzvf $FILE -C $DEST
							fi
							rm $FILE
							;;

						*.tar)
							wget $snapUrl
							BC_FOLDER=`tar -tvf $FILE | grep "blockchain/"`
							if [[ $BC_FOLDER == *[!\ ]* ]]; then #archive contains blockchain folder
								rm $DEST
								tar -xvf $FILE
							else
								rm $DEST
								mkdir $DEST
								tar -xvf $FILE -C $DEST
							fi
							rm $FILE
							;;
						*.zip)      ;& #fallthrough
						*.7z)       ;& #fallthrough
						*.rar)
							wget $snapUrl
							BC_FOLDER="blockchain"
							FOLDER_EXIST=`7z l $FILE | grep $BC_FOLDER`
							echo  "folderexist: $FOLDER_EXIST"
							if [[ $FOLDER_EXIST == *[!\ ]* ]]; then
								echo "exists"
								7z x $FILE
							else
								echo "doesn't exist"
								7z x $FILE -o$DEST
							fi
							rm $FILE
							;;
						*)
							echo "unsupported archive type"
							exit 1
							;;
					esac
			fi
			sudo systemctl start fire_watch.service
			;;
		*)
##### invalid mode ############################################################
			echo "Error: $MODE is an invalid value for mode! Exiting..."
			exit 1
			;;
esac




